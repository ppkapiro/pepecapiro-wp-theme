name: Publish Prod Post

on:
  push:
    branches: [ main ]
    paths:
      - .github/auto/publish_prod.flag
  workflow_dispatch:

concurrency:
  group: publish-prod-post-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq
        run: |
          sudo apt-get update -y >/dev/null 2>&1 || true
          sudo apt-get install -y jq >/dev/null 2>&1 || true

      - name: Guardarraíles
        id: guard
        env:
          EVENT_NAME: ${{ github.event_name }}
          BRANCH_REF: ${{ github.ref }}
          HEAD_MSG: ${{ github.event.head_commit.message }}
        run: |
          set -euo pipefail
          go="no"
          # Solo rama main
          if [ "${BRANCH_REF:-}" != "refs/heads/main" ]; then
            echo "No main branch; skip"
            echo "go=no" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ "${EVENT_NAME}" = "push" ]; then
            # En push, este workflow solo se activa cuando cambia el flag por paths, pero admitimos alternativa por [release]
            if printf '%s' "${HEAD_MSG:-}" | grep -qi "\[release\]"; then
              go="yes"
            else
              # paths garantiza que el flag cambió
              go="yes"
            fi
          elif [ "${EVENT_NAME}" = "workflow_dispatch" ]; then
            # Permitir dispatch manual conscientemente
            go="yes"
          fi
          echo "go=$go" >> $GITHUB_OUTPUT

      - name: Fail-fast autenticación
        if: steps.guard.outputs.go == 'yes'
        id: auth
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${WP_URL:-}" ] || [ -z "${WP_USER:-}" ] || [ -z "${WP_APP_PASSWORD:-}" ]; then
            echo "Auth: KO (faltan secrets)"
            exit 2
          fi
          URL="${WP_URL%/}/wp-json/wp/v2/users/me"
          CODE=$(curl -sS -o /tmp/auth.json -w "%{http_code}" -u "$WP_USER:$WP_APP_PASSWORD" "$URL")
          if [ "$CODE" != "200" ]; then
            echo "Auth: KO ($CODE)"
            exit 2
          fi
          echo "Auth: OK"

      - name: Detectar plugin de idiomas
        if: steps.guard.outputs.go == 'yes'
        id: i18n
        env:
          WP_URL: ${{ secrets.WP_URL }}
        run: |
          set -euo pipefail
          ROOT="${WP_URL%/}/wp-json/"
          json=$(curl -sS "$ROOT" || echo '{}')
          has_pll=$(printf '%s' "$json" | jq -r '.namespaces[]? | select(test("^pll/"))' | head -n1 || true)
          has_wpml=$(printf '%s' "$json" | jq -r '.namespaces[]? | select(test("wpml"))' | head -n1 || true)
          plugin="none"
          if [ -n "$has_pll" ]; then plugin="polylang"; fi
          if [ -n "$has_wpml" ]; then plugin="wpml"; fi
          echo "plugin=$plugin" >> $GITHUB_OUTPUT

      - name: Generar contenido de producción
        if: steps.guard.outputs.go == 'yes'
        id: gen
        run: |
          set -euo pipefail
          TS=$(date -u +"%Y%m%d-%H%M%S")
          RAND=$(printf "%04d" $((RANDOM%10000)))
          TITLE_ES="Prod Post ES ${TS} #${RAND}"
          TITLE_EN="Prod Post EN ${TS} #${RAND}"
          CONTENT_ES="<p>Entrada (ES) publicada automáticamente.</p><p>UTC: ${TS}</p><p>Nonce: ${RAND}</p>"
          CONTENT_EN="<p>Post (EN) automatically published.</p><p>UTC: ${TS}</p><p>Nonce: ${RAND}</p>"
          SLUG_ES="prod-es-${TS}-${RAND}"
          SLUG_EN="prod-en-${TS}-${RAND}"
          jq -n --arg t "$TITLE_ES" --arg c "$CONTENT_ES" --arg s "publish" --arg g "$SLUG_ES" '{title:$t, content:$c, status:$s, slug:$g}' > prod_post_es.json
          jq -n --arg t "$TITLE_EN" --arg c "$CONTENT_EN" --arg s "publish" --arg g "$SLUG_EN" '{title:$t, content:$c, status:$s, slug:$g}' > prod_post_en.json
          echo "title_es=$TITLE_ES" >> $GITHUB_OUTPUT
          echo "title_en=$TITLE_EN" >> $GITHUB_OUTPUT

      - name: Publicar ES (publish)
        if: steps.guard.outputs.go == 'yes'
        id: publish_es
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
          TITLE: ${{ steps.gen.outputs.title_es }}
          PLUGIN: ${{ steps.i18n.outputs.plugin }}
        run: |
          set -euo pipefail
          API="${WP_URL%/}/wp-json/wp/v2/posts"
          title_q=$(printf '%s' "$TITLE" | jq -sRr @uri)
          found=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" "$API?search=$title_q&per_page=5" || echo "[]")
          upd_id=$(printf '%s' "$found" | jq -r '.[0].id // empty')
          MODE="create"
          if [ -n "$upd_id" ]; then
            MODE="update"
            url="$API/$upd_id"
            RESP=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" -X POST -H "Content-Type: application/json" -d @prod_post_es.json -w " HTTP_STATUS:%{http_code}" "$url")
          else
            url="$API"
            if [ "$PLUGIN" = "polylang" ] || [ "$PLUGIN" = "wpml" ]; then url="$url?lang=es"; fi
            RESP=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" -H "Content-Type: application/json" -d @prod_post_es.json -w " HTTP_STATUS:%{http_code}" "$url")
          fi
          CODE="${RESP##* HTTP_STATUS:}"
          BODY="${RESP% HTTP_STATUS:*}"
          echo "$BODY" > /tmp/prod_es.json
          if [ "$CODE" != "201" ] && [ "$CODE" != "200" ]; then echo "ES KO ($CODE)"; echo "$BODY" | head -c 400 || true; exit 3; fi
          echo "id_es=$(jq -r '.id' /tmp/prod_es.json)" >> $GITHUB_OUTPUT
          echo "status_es=$(jq -r '.status' /tmp/prod_es.json)" >> $GITHUB_OUTPUT
          echo "link_es=$(jq -r '.link' /tmp/prod_es.json)" >> $GITHUB_OUTPUT

      - name: Publicar EN (publish)
        if: steps.guard.outputs.go == 'yes'
        id: publish_en
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
          TITLE: ${{ steps.gen.outputs.title_en }}
          PLUGIN: ${{ steps.i18n.outputs.plugin }}
        run: |
          set -euo pipefail
          API="${WP_URL%/}/wp-json/wp/v2/posts"
          title_q=$(printf '%s' "$TITLE" | jq -sRr @uri)
          found=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" "$API?search=$title_q&per_page=5" || echo "[]")
          upd_id=$(printf '%s' "$found" | jq -r '.[0].id // empty')
          MODE="create"
          if [ -n "$upd_id" ]; then
            MODE="update"
            url="$API/$upd_id"
            RESP=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" -X POST -H "Content-Type: application/json" -d @prod_post_en.json -w " HTTP_STATUS:%{http_code}" "$url")
          else
            url="$API"
            if [ "$PLUGIN" = "polylang" ] || [ "$PLUGIN" = "wpml" ]; then url="$url?lang=en"; fi
            RESP=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" -H "Content-Type: application/json" -d @prod_post_en.json -w " HTTP_STATUS:%{http_code}" "$url")
          fi
          CODE="${RESP##* HTTP_STATUS:}"
          BODY="${RESP% HTTP_STATUS:*}"
          echo "$BODY" > /tmp/prod_en.json
          if [ "$CODE" != "201" ] && [ "$CODE" != "200" ]; then echo "EN KO ($CODE)"; echo "$BODY" | head -c 400 || true; exit 3; fi
          echo "id_en=$(jq -r '.id' /tmp/prod_en.json)" >> $GITHUB_OUTPUT
          echo "status_en=$(jq -r '.status' /tmp/prod_en.json)" >> $GITHUB_OUTPUT
          echo "link_en=$(jq -r '.link' /tmp/prod_en.json)" >> $GITHUB_OUTPUT

      - name: Vincular traducciones (Polylang, best-effort)
        if: steps.guard.outputs.go == 'yes'
        id: link
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
          PLUGIN: ${{ steps.i18n.outputs.plugin }}
          ID_ES: ${{ steps.publish_es.outputs.id_es }}
          ID_EN: ${{ steps.publish_en.outputs.id_en }}
        run: |
          set -euo pipefail
          linked="no"
          if [ "${PLUGIN}" = "polylang" ] && [ -n "${ID_ES:-}" ] && [ -n "${ID_EN:-}" ]; then
            API_BASE="${WP_URL%/}/wp-json/wp/v2/posts"
            payload=$(jq -n --arg es "$ID_ES" --arg en "$ID_EN" '{meta:{pll_translations:{es: ($es|tonumber), en: ($en|tonumber)}}}')
            RESP=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" -X PATCH -H "Content-Type: application/json" -d "$payload" -w " HTTP_STATUS:%{http_code}" "$API_BASE/$ID_ES" || true)
            CODE="${RESP##* HTTP_STATUS:}"
            if [ "$CODE" = "200" ]; then linked="si"; fi
          fi
          echo "linked=$linked" >> $GITHUB_OUTPUT

      - name: Asignar categorías ES (opcional)
        if: steps.guard.outputs.go == 'yes'
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
          POST_ID: ${{ steps.publish_es.outputs.id_es }}
        run: |
          set -euo pipefail
          [ -z "${POST_ID:-}" ] && exit 0
          API_CATS="${WP_URL%/}/wp-json/wp/v2/categories"
          get_id() { local name="$1"; enc=$(printf '%s' "$name" | jq -sRr @uri); resp=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" "$API_CATS?search=$enc&per_page=1" || echo '[]'); printf '%s' "$resp" | jq -r '.[0].id // empty'; }
          IDS=()
          for n in "Blog" "Guías"; do id=$(get_id "$n"); [ -n "$id" ] && IDS+=("$id"); done
          [ ${#IDS[@]} -eq 0 ] && exit 0
          ids_json=$(printf '%s\n' "${IDS[@]}" | jq -Rsc 'split("\n")[:-1] | map(tonumber)')
          payload=$(jq -n --argjson ids "$ids_json" '{categories:$ids}')
          curl -sS -u "$WP_USER:$WP_APP_PASSWORD" -X POST -H "Content-Type: application/json" -d "$payload" "${WP_URL%/}/wp-json/wp/v2/posts/${POST_ID}" >/dev/null || true

      - name: Asignar categorías EN (opcional)
        if: steps.guard.outputs.go == 'yes'
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USER: ${{ secrets.WP_USER }}
          WP_APP_PASSWORD: ${{ secrets.WP_APP_PASSWORD }}
          POST_ID: ${{ steps.publish_en.outputs.id_en }}
        run: |
          set -euo pipefail
          [ -z "${POST_ID:-}" ] && exit 0
          API_CATS="${WP_URL%/}/wp-json/wp/v2/categories"
          get_id() { local name="$1"; enc=$(printf '%s' "$name" | jq -sRr @uri); resp=$(curl -sS -u "$WP_USER:$WP_APP_PASSWORD" "$API_CATS?search=$enc&per_page=1" || echo '[]'); printf '%s' "$resp" | jq -r '.[0].id // empty'; }
          IDS=()
          for n in "Blog" "Guides"; do id=$(get_id "$n"); [ -n "$id" ] && IDS+=("$id"); done
          [ ${#IDS[@]} -eq 0 ] && exit 0
          ids_json=$(printf '%s\n' "${IDS[@]}" | jq -Rsc 'split("\n")[:-1] | map(tonumber)')
          payload=$(jq -n --argjson ids "$ids_json" '{categories:$ids}')
          curl -sS -u "$WP_USER:$WP_APP_PASSWORD" -X POST -H "Content-Type: application/json" -d "$payload" "${WP_URL%/}/wp-json/wp/v2/posts/${POST_ID}" >/dev/null || true

      - name: Resumen final
        if: always()
        run: |
          {
            echo "--- Resumen Publish Prod Post ---"
            echo "Auth: $([[ '${{ steps.auth.outcome }}' == 'success' ]] && echo OK || echo KO)"
            echo "ES: ID=${{ steps.publish_es.outputs.id_es }} link=${{ steps.publish_es.outputs.link_es }} estado=${{ steps.publish_es.outputs.status_es }}"
            echo "EN: ID=${{ steps.publish_en.outputs.id_en }} link=${{ steps.publish_en.outputs.link_en }} estado=${{ steps.publish_en.outputs.status_en }}"
            echo "Traducciones vinculadas: $([[ '${{ steps.link.outputs.linked }}' == 'si' ]] && echo Sí || echo No) (Polylang)"
          } >> "$GITHUB_STEP_SUMMARY"
