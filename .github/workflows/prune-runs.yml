name: Prune Old Workflow Runs

on:
  workflow_dispatch:
    inputs:
      workflow:
        description: 'Nombre (name) del workflow a podar (ej: Content Sync). Vacío = todos.'
        required: false
        default: ''
      keep:
        description: 'Número de ejecuciones más recientes a conservar'
        required: true
        default: '10'
      dry_run:
        description: 'true = solo mostrar qué se borraría, false = borrar de verdad'
        required: false
        default: 'true'

jobs:
  prune:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    steps:
      - name: Determinar parámetros
        id: params
        run: |
          WF_NAME="${{ github.event.inputs.workflow }}"
          KEEP=${{ github.event.inputs.keep }}
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          if [ -z "$KEEP" ]; then KEEP=10; fi
          if [ -z "$DRY_RUN" ]; then DRY_RUN=true; fi
          echo "wf_name=$WF_NAME" >> $GITHUB_OUTPUT
          echo "keep=$KEEP" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT
      - name: Prune runs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          WF_NAME="${{ steps.params.outputs.wf_name }}"
          KEEP=${{ steps.params.outputs.keep }}
          DRY_RUN="${{ steps.params.outputs.dry_run }}"
          echo "[INFO] Manteniendo las últimas $KEEP ejecuciones (dry_run=$DRY_RUN)" >&2
          [ -n "$WF_NAME" ] && echo "[INFO] Filtro por nombre: $WF_NAME" >&2
          # Recuperar todos los runs (paginado)
          if ! gh api repos/${{ github.repository }}/actions/runs --paginate -F per_page=100 -q '.workflow_runs[]' | jq -s '.' > _all_raw.json; then
            echo '[]' > _all_raw.json
            echo "[WARN] gh api falló; lista vacía" >&2
          fi
          if [ -n "$WF_NAME" ]; then
            jq --arg NAME "$WF_NAME" '[ .[] | select(.name==$NAME) | {id, name, run_number, created_at, status, conclusion}]' _all_raw.json > runs_all.json
          else
            jq '[ .[] | {id, name, run_number, created_at, status, conclusion}]' _all_raw.json > runs_all.json
          fi
          total=$(jq 'length' runs_all.json)
          if [ "$total" -eq 0 ]; then
            echo "[WARN] Total=0. Guardando _all_raw.json para inspección" >&2
          fi
          echo "[INFO] Total consideradas: $total" >&2
          if [ $total -le $KEEP ]; then
            echo "[INFO] No hay candidatas (total <= keep)" >&2
            jq -n '[]' > runs_candidates.json
            ACTION="none"
          else
            jq --argjson K $KEEP 'sort_by(.created_at) | reverse | .[$K:]' runs_all.json > runs_candidates.json
            ACTION="prune"
          fi
          cand_count=$(jq 'length' runs_candidates.json)
          echo "[INFO] Candidatas: $cand_count" >&2
          del_count=0
          if [ "$DRY_RUN" = "true" ]; then
            echo "[INFO] Dry-run: no se ejecutan borrados" >&2
          else
            if [ "$ACTION" = "prune" ] && [ $cand_count -gt 0 ]; then
              for rid in $(jq -r '.[] | select(.status!="in_progress" and .status!="queued") | .id' runs_candidates.json); do
                echo "[DEL] run $rid" >&2 || true
                gh api repos/${{ github.repository }}/actions/runs/$rid -X DELETE || true
                del_count=$((del_count+1))
              done
            fi
          fi
          {
            echo "# Prune Runs Resultado";
            echo "Repositorio: $GITHUB_REPOSITORY";
            echo "Fecha: $(date -u +%Y-%m-%dT%H:%M:%SZ)";
            echo "Filtro workflow: ${WF_NAME:-(todos)}";
            echo "Keep: $KEEP";
            echo "Dry-run: $DRY_RUN";
            echo "Total consideradas: $total";
            echo "Candidatas: $cand_count";
            echo "Borradas: $del_count";
            echo; echo "## Candidatas (primeras 20 para vista rápida)"; 
            jq -r '.[0:20] | .[] | "- #\(.run_number) id=\(.id) status=\(.status) conclusion=\(.conclusion) created=\(.created_at)"' runs_candidates.json;
          } > summary.md
      - name: Subir artefacto pruning
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prune-runs-output
          path: |
            runs_all.json
            runs_candidates.json
            summary.md
            _all_raw.json
